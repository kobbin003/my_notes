redux-persist:

1️⃣️. store.ts:

	import { combineReducers, configureStore } from "@reduxjs/toolkit";
	import userReducer from "../Reducer/userSlice";
	import {
		persistStore,
		persistReducer,
		FLUSH,
		REHYDRATE,
		REGISTER,
		PURGE,
		PERSIST,
		PAUSE,
	} from "redux-persist";
	import storage from "redux-persist/lib/storage";
	const rootReducer = combineReducers({ user: userReducer });

	const persistConfig = {
		key: "root",
		storage,
	};

	const persistedReducer = persistReducer(persistConfig, rootReducer);

	export const store = configureStore({
		reducer: persistedReducer,
		middleware: (getDefaultMiddleware) =>
			getDefaultMiddleware({
				serializableCheck: {
					ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],
				},
			}),
	});

	export const persistor = persistStore(store);

	// Infer the `RootState` and `AppDispatch` types from the store itself
	export type RootState = ReturnType<typeof store.getState>;
	// Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}
	export type AppDispatch = typeof store.dispatch;
	
2️⃣️. wrap your root component with PersistGate:
		<Provider store={store}>
			<PersistGate
				loading={null}
				persistor={persistor}
			>
				<RouterProvider router={router} />
			</PersistGate>
		</Provider>
