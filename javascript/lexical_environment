------------------------------------------ Step 1. Variables
In JavaScript, every running function, code block {...}, and the script as a whole have an internal (hidden) 
associated object known as the Lexical Environment.

The "Lexical Environment" object consists of two parts:

1. "Environment Record" – an object that stores all local variables as its properties (and some other information 
like the value of this).
2. A "reference to the outer lexical environment", the one associated with the outer code.

A “variable” is just a property of the special internal object, Environment Record. “To get or change a 
variable” means “to get or change a property of that object”.

The global Lexical Environment has no outer reference, that’s why ot's refrence to outer lexical environment
points to null.


------------------------------------------- Step 2. Function Declarations
A function is also a value, like a variable.

The difference is that a Function Declaration is instantly fully initialized.

When a Lexical Environment is created, a Function Declaration immediately becomes a ready-to-use function 
(unlike let, that is unusable till the declaration).

That’s why we can use a function, declared as Function Declaration, even before the declaration itself.
this behavior only applies to Function Declarations, not Function Expressions where we assign a function to a variable, 
such as let say = function(name)..



--------------------------------------------- Step 3. Inner and outer Lexical Environment
When a function runs, at the beginning of the call, a new Lexical Environment is created automatically to store local 
variables and parameters of the call.

During the function call we have two Lexical Environments: 
the inner one (for the function call) and the outer one (global):

The inner Lexical Environment has a reference to the outer one.

"When the code wants to access a variable" – the inner Lexical Environment is searched first, then the outer one, 
then the more outer one and so on until the global one.


------------------------------------------- Step 4. Returning a function
All functions remember the Lexical Environment in which they were made. Technically, there’s no magic here: 
all functions have the hidden property named "[[Environment]]", 
that keeps the reference to the Lexical Environment where the function was created:

[[Environment]] has the reference to it'a Lexical Environment(i.e all the variables created). 
That’s how the function remembers where it was created, no matter where it’s called. 
The [[Environment]] reference is set once and forever at function creation time.







